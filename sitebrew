#!/usr/bin/env perl
use v5.14;
use FindBin;
use lib "$FindBin::Bin/lib";

use File::Find;
use Text::Markdown qw(markdown);
use IO::All -utf8;
use File::Copy;
use YAML;
use List::MoreUtils qw(any);
use AnyEvent;
use AnyEvent::Worker;
use Data::RoundRobin;

use Sitebrew;
use Sitebrew::Article;

Sitebrew->initialize(app_root => io->curdir->absolute->name);

sub copy_assets {
    my $source = shift;
    my $destination = $source =~ s/^content/public/r;

    my $x = io->file($destination);
    if ($x->exists && $x->mtime > io($source)->mtime ) {
        # say "SKIP $source => $destination";
    }
    else {
        say "COPY $source => $destination";
        copy($source, $destination)
            or die "copy failed: $!";

        say "COPY $source => $destination";
    }
}

sub build_all {
    my @articles = Sitebrew::Article->all;

    my @view_mtime = (
        io("views/default-layout.tx")->mtime,
        io("views/article.tx")->mtime
    );

    my $builder_cv = AnyEvent->condvar;
    my $builder_sub = sub {
        my $markdown_file = shift;
        my $html_file  = $markdown_file =~ s/\.md$/.html/r =~ s/^content/public/r;
        my $html_mtime = io($html_file)->mtime;

        if (any { $html_mtime > $_ } @view_mtime) {
            system "sitebrew-one", $markdown_file;
        }
    };

    my $builders = Data::RoundRobin->new(
        AnyEvent::Worker->new($builder_sub),
        AnyEvent::Worker->new($builder_sub)
    );

    for my $article (@articles) {
        $builder_cv->begin;

        $builders->next->do(
            $article->content_file, sub {
                $builder_cv->end;
            }
        );
    }

    find +{
        wanted => sub {
            return if !-f || /\.DS_Store/ || /\.git/ || /(\.md|_attributes\.yml)\z/ || $File::Find::dir =~ /(sass|\.git)/;
            copy_assets($File::Find::name);
        },
        no_chdir => 1,
        follow => 1
    }, "content";

    $builder_cv->recv;
    say 'ALL DONE';
}

build_all;
