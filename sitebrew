#!/usr/bin/env perl
use v5.14;
use strict;
use warnings;
use File::Find;
use Text::Markdown qw(markdown);
use IO::All -utf8;
use YAML;

sub markdown_file :lvalue {
    state $markdown_file
}

sub html_file {
    markdown_file =~ s/\.md$/.html/r =~ s/^content/public/r;
}

sub build_markdown {
    markdown_file = shift;

    if (-f html_file && io(html_file)->mtime > io(markdown_file)->mtime) {
        return;
    }

    system "sitebrew-one", markdown_file;
}

sub build_all {
    find +{
        wanted => sub {
            return if !-f || /\.DS_Store/ || /\.git/ || $File::Find::dir =~ /(sass|\.git)/;

            if (/\.md\z/s) {
                build_markdown($File::Find::name);
            }
            else {
                my $dest = $File::Find::name;
                if ($dest =~ s/^content/public/) {

                    unless ( io->file($dest)->exists && io->file($dest)->mtime > io($_)->mtime ) {
                        say "$File::Find::name => $dest";
                        io($File::Find::name) > io->file($dest)->assert->print("");
                    }
                }
            }
        },
        no_chdir => 1
    }, "content";

    say 'DONE';
}

sub build_index {
    system "sitebrew-index";
}

if (@ARGV && $ARGV[0] eq '--watch') {
    use File::ChangeNotify;
    my $watcher = File::ChangeNotify->instantiate_watcher(
        directories => ['content', 'layouts'],
        filter      => qr/\.(html|md|tx)$/
    );

    while (my @events = $watcher->wait_for_events() ) {
        say("+-+ " . $_->path) for (@events);
        build_all;
        build_index;
    }
}
else {
    build_all;
    build_index;
}
